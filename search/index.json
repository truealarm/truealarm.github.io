[{"content":"Copy elision은 불필요한 객체의 복사 과정을 제거하는 컴파일러 최적화 기법이다. 예전부터 C++ 컴파일러에도 Copy elision 기법이 적용되어 있었고, 우리는 알게 모르게 최적화의 혜택을 누리고 있었다. 그러다 C++17부터 Guaranteed copy elision 제안이 받아들여지면서 Copy elision 기법에 변화가 생겼다. 이름만 보면 한층 더 강력한 최적화 기법을 적용한 것 같지만, 임시 객체(temporary)와 prvalue에 대한 명세를 살짝 바꿨을 뿐 어떠한 최적화 기법이 추가되지는 않았다. 해당 포스트는 바뀐 명세로 인해 생긴 변화와 이점에 대해 얘기한다.\nCopy elision Copy elision이 어떤 최적화 기법인지는 위키피디아에 잘 나와있지만, 기본적인 내용부터 확실히 알고 넘어가자.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include \u0026lt;iostream\u0026gt; int n = 0; struct C { explicit C(int) {} C(const C\u0026amp;) { ++n; } // the copy constructor has a observable side effect }; // it modifies an object with static storage duration int main() { C c1(42); // direct-initialization, calls C::C(int) C c2{42}; // direct-list-initialization, calls C::C(int) C c3 = C(42); // copy-initialization, calls C::C(const C\u0026amp;) C c4 = C{42}; // copy-initialization, calls C::C(const C\u0026amp;) std::cout \u0026lt;\u0026lt; n \u0026lt;\u0026lt; std::endl; // prints 0 if the copy was elided, 2 otherwise } c1는 생성자에 직접 인자를 전달해 초기화하는 direct-initialization, c2는 중괄호(brace)를 사용해 객체를 초기화한 direct-list-initialization라고 부르며 c++11부터 추가된 기능이다. (c++11 이전은 괄호와 동일하게 처리됨) c3, c4는 각각 direct-initialization, direct-list-initialization으로 초기화한 임시 객체를 복사해 초기화하는 copy-initialization이다.\ncopy-initialization로 초기화하는 과정은 생성한 임시 객체를 그대로 사용하지 않고, 복사/이동 생성자를 통해 임시 객체를 복사/이동하므로 direct-initialization보다 더 많은 연산이 요구된다.\n임시 객체는 어차피 초기화할 때만 사용되므로, 불필요한 복사/이동 생성자를 생략하고 객체를 직접 초기화한 것 처럼 처리하는게 Copy elision이다. 하지만 예제의 구조체처럼 복사 생성자가 observable한 side effect(n을 변경하는 코드)가 있는 경우, 컴파일러 정책에 따라 적용 유무가 달라질 수 있다. c++17의 경우 Mandatory elision of copy/move operations라고 해서 side effect가 있더라도 prvaule로 초기화하는 식에는 무조건 Copy elision을 적용한다.\nMandatory elision of copy/move operations (since c++17)\nUnder the following circumstances, the compilers are required to omit the copy and move construction of class objects, even if the copy/move constructor and the destructor have observable side-effects. The objects are constructed directly into the storage where they would otherwise be copied/moved to. The copy/move constructors need not be present or accessible:\nIn the initialization of an object, when the initializer expression is a prvalue of the same class type (ignoring cv-qualification) as the variable type: Return Value Optimization 함수에서 생성한 임시 객체를 값으로 반환할 때, 임시 객체의 scope는 함수 내부이므로 반환 이후 소멸된다. 소멸되기 전에 반환할 객체를 생성하고 임시 객체를 복사하는 과정이 필요하다. 하지만 임시 객체는 다른 객체를 초기화하는 용도로만 사용되므로, 복사 과정을 생략하고 그대로 임시 객체를 반환하는 최적화 기법을 Return Value Optimization(RVO)라고 부르며 Copy elision의 한 종류이다.\n반환식에 바로 객체의 초기화식이 와서 임시 객체의 이름이 없는 경우 Unnamed RVO (URVO), 임시 객체를 생성하는 식과 반환식이 분리되어 이름이 있는 경우 Named RVO (NRVO)라고 분류된다. NRVO의 경우 두 개의 식 사이에 다른 대입 연산이 올 수 있는게 특징이고, c++17 이후에도 Non-mandatory한 copy elision으로 간주되어 컴파일러 정책에 따라 적용 유무가 달라진다. (URVO는 c++17부터 필수적으로 적용)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include \u0026lt;iostream\u0026gt; struct C { C(const C\u0026amp;) { std::cout \u0026lt;\u0026lt; \u0026#34;A copy was made.\\n\u0026#34;; } }; C f() { return C(); // copy-initialization, calls C::C(const C\u0026amp;) } int main() { std::cout \u0026lt;\u0026lt; \u0026#34;Hello World\\n\u0026#34;; C obj = f(); // copy-initialization, calls C::C(const C\u0026amp;) } 위의 예제코드의 f 함수가 전형적인 URVO를 적용할 수 있는 케이스이다. 이후 반환된 객체를 초기화할 때 역시 copy-initialization이 필요하지만, Copy elision 기법에 의해 생략될 수 있다. 따라서 \u0026ldquo;Hello world\u0026rdquo; 문자열이 최대 2번, 최소 0번 출력될 수 있고, c++17 이후라면 출력되지 않을 것이다.\nThe problem c++17 이전 Copy elision 최적화 기법에 관해 컴파일러가 필수적으로 보장해야 할 명세가 없었고, 어차피 생략되는 복사/이동 생성자의 유무를 신경쓰지 않았기에 예상치 못한 문제가 발견된다.\n1 2 3 4 5 struct NonMoveable { NonMoveable() = default; NonMoveable(NonMoveable\u0026amp;\u0026amp;) = delete; }; NonMoveable make() { return {}; } // compiles in c++11 RVO를 지원하는 c++11 컴파일러에서 위 예제 코드를 컴파일하면 에러가 발생한다. make 함수에서 이동 생성자가 지워진 NonMoveable 구조체로 생성한 임시 객체를 반환할 객체로 이동을 시도하기 때문이다. 실제로 RVO가 적용되어 복사/이동 생성자가 사용되지 않지만, 생성자가 없다는 이유로 컴파일을 거부하는 모순적인 상황이 발생한다. 이는 c++11으로는 non-moveable 타입에 대한 factory 함수를 만들 수 없는 것을 의미한다.\n게다가, non-moveable 타입은 AAA(Always Almost Auto) 스타일로 초기화할 수 없게 된다. (e.g. amotic, lock_guard)\n1 auto x = NonMoveable{}; // compiles in c++11 이런 제한 사항은 프로그래머에게 동적 할당된 주소를 반환하는 패턴을 사용하거나, 단순히 에러가 발생하지 않게 하기 위해 흑마법을 사용하게 하는 결과를 초래한다. 좋은 언어라면 프로그래머가 나쁜 코드를 작성하지 않고, 좋은 코드를 짤 수 있도록 설계되어 있다. 다행히 c++은 충분히 좋은 언어이므로, c++17에서는 이런 문제가 발생하지 않는다. (Richard Smith가 제안한 Guaranteed copy elision라는 제안을 통해 문제를 해결함)\nGuaranteed copy elision Guaranteed copy elision은 기존 c++이 prvalue와 glvalue를 어떻게 정의하고 있었고, pvalue가 표현식으로 평가될 때 어떤 일이 벌어지고 있었는 지에 중점을 맞춘다. 아래는 c++17 이전에 정의하고 있던 value categories에 대한 설명이다.\nAn lvalue (so called, historically, because lvalues could appear on the left-hand side of an assignment expression) designates a function or an object. [ Example: If E is an expression of pointer type, then *E is an lvalue expression referring to the object or function to which E points. As another example, the result of calling a function whose return type is an lvalue reference is an lvalue. - end example ] An xvalue (an \u0026ldquo;eXpiring\u0026rdquo; value) also refers to an object, usually near the end of its lifetime (so that its resources may be moved, for example). Certain kinds of expressions involving rvalue references (8.3.2) yield xvalues. [ Example: The result of calling a function whose return type is an rvalue reference to an object type is an xvalue (5.2.2). - end example ] A glvalue (\u0026ldquo;generalized\u0026rdquo; lvalue) is an lvalue or an xvalue. An rvalue (so called, historically, because rvalues could appear on the right-hand side of an assignment expression) is an xvalue, a temporary object (12.2) or subobject thereof, or a value that is not associated with an object. A prvalue (\u0026ldquo;pure\u0026rdquo; rvalue) is an rvalue that is not an xvalue. [ Example: The result of calling a function whose return type is not a reference is a prvalue. The value of a literal such as 12, 7.3e5, or true is also a prvalue. - end example ] 이 설명만 보면 NonMoveable{} 처럼 임시 객체를 초기화하는 식은 prvalue로 분류하고, NonMoveable{}.x은 왜 glvalue로 분류할 수 있었는 지 알기 어렵다.\nRichard Smith는 prvalue와 glvaule 간 혼란을 줄이기 위해 prvalue는 객체를 초기화하는 식, glvalue는 identity를 부여하는 식으로 의미를 구체화했다. 그래서 객체를 초기화하는 식(NonMoveable{})은 identity를 갖지 않으므로 prvalue로 분류할 수 있고, identity가 부여되는 식(NonMoveable{}.x)은 glvalue로 구분할 수 있다. 이로 인해 c++17 부터는 value categories에 대한 정의가 바뀌었지만, 기존 값 분류와 어긋나지는 않는다. (조금 더 자세한 기준이 생긴 것으로 봄)\nA glvalue [(generalized lvalue)] is an expression whose evaluation determines the identity of an object, bit-field, or function. A prvalue is an expression whose evaluation initializes an object or a bit-field, or computes the value of an operand of an operator, as specified by the context in which it appears. An xvalue is a glvalue that denotes an object or bit-field whose resources can be reused (usually because it is near the end of its lifetime). An lvalue is a glvalue that is not an xvalue. An rvalue is a prvalue or an xvalue. 추가적으로 prvalue에 identity가 부여되어 glvalue로 타입 변경이 일어나는 행위를 Temporary materialization이라고 정의하며, c++17 표준에 명시되어 있다. 이 정의가 중요한 이유는 임시 객체가 실제로 필요하기 전까진, 다시 말해 identity가 부여되어 materialization되기 전까지 임시 객체를 생성하지 않아도 되기 때문이다.\nTemporary materialization (since c++17)\nA prvalue of any complete type T can be converted to an xvalue of the same type T. This conversion initializes a temporary object of type T from the prvalue by evaluating the prvalue with the temporary object as its result object, and produces an xvalue denoting the temporary object. If T is a class or array of class type, it must have an accessible and non-deleted destructor.\n객체의 생명주기를 명시하고있는 Lifetime 문서에도 c++17에서 임시 객체는 prvalue가 나타나는 식에서 생성되는게 아니라, materialized될 때 생성한다고 나와있다.\nTemporary objects are created when a prvalue is materialized so that it can be used as a glvalue, which occurs (since C++17) in the following situations:\n그래서 c++17 이전 관점으로 아래 코드를 본다면, \u0026ldquo;임시 객체를 생성하고 임시 객체를 x로 이동하지만 Copy elision으로 이동 과정을 생략함\u0026quot;으로 해석하고, c++17 이후 관점으로는 \u0026ldquo;x를 초기화하는 식\u0026quot;으로 해석할 수 있다.\n1 2 struct X {}; auto x = X{}; 임시 객체가 생성되지 않는다면, 복사나 이동을 생각할 필요 자체가 없어진다. 결국 Copy elision과 복사/이동 생성자 사이의 의존성이 모두 사라져, 이전에 발생했던 모순과 같은 문제들이 전부 해결된다.\nConclusion Guaranteed copy elision는 copy elision를 보완하는 내용이 아닌, 애매하던 기존 c++ value categories의 정의를 좀 더 구체화하고, 임시 객체가 실제 필요할 때 생성하는 방식으로, c++의 기능을 개선함과 동시에 문제를 해결하였다. 이를 통해 c++17에서 임시 객체를 어떻게 바라볼 지, value categories가 갖는 의미에 대해 자세히 알 수 있었다.\nReferences https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0135r0.html https://devblogs.microsoft.com/cppblog/guaranteed-copy-elision-does-not-elide-copies/ https://en.cppreference.com/w/cpp/language/copy_elision https://groups.google.com/a/isocpp.org/forum/#!topic/std-proposals/LEzTGnc4FZo ","date":"2022-12-31T19:46:30+09:00","permalink":"https://truealarm.github.io/p/guaranteed-copy-elision.-whats-difference/","title":"Guaranteed copy elision. What's difference?"},{"content":"Same-origin policy는 인터넷 브라우저와 같이 http 서버와 통신하는 웹 애플리케이션이 사용하는 보안 정책의 한 종류이다. 현대의 브라우저라면 필수적으로 적용하는 정책으로, 웹 페이지에서 스크립트를 통해 다른 웹 페이지의 컨텐츠를 읽을 때 Origin이 같은 경우만 허용하는 정책이다.\nThe Origin 한국어로 기원, 근원을 의미하는 Origin이라는 단어는 Same-origin policy에서 정확히 어떤 의미를 사용되고, 왜 필요한건지 알 필요가 있다.\n기본적으로 HTTP 프로토콜로 통신하는 클라이언트와 서버는 매 연결마다 새로운 연결을 시도한다. 때문에 웹 사이트에 로그인한 유저의 상태를 계속 유지하는 것처럼, 이전 HTTP 요청에 대한 정보를 유지하고 싶으면 Cookie에 세션 아이디를 저장하는 방식을 사용할 수 있다.\n브라우저는 스크립트를 통해 시작된 HTTP 요청에도 Cookie를 리퀘스트 헤더에 포함하고, Cookie에는 세션 정보를 포함하고 있으므로, 서버는 로그인한 유저라고 간주한 채 요청을 처리하고 리스폰스를 반환한다. 이때 아무런 제약 없이 리스폰스를 읽을 수 있다면, 심각한 보안 위협으로 이어질 수 있다.\n악의적인 웹 사이트(evil.com)의 운영자가 선량한 웹 사이트의 민감 정보를 반환하는 API(bank.com/myinfo)를 요청하고, 이 결과를 다시 본인의 서버로 전송하는 스크립트(아래 코드 참고)를 웹 사이트에 포함시켜 놓으면, 선량한 웹 사이트에 로그인한 유저가 evil.com에 방문하는 것만으로도 민감 정보가 유출된다.\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;!-- evil.com --\u0026gt; \u0026lt;script\u0026gt; var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function() { if (xhr.readyState == XMLHttpRequest.DONE) { sendToEvil(xhr.responseText); } } xhr.open(\u0026#39;GET\u0026#39;, \u0026#39;bank.com/myinfo\u0026#39;, true); xhr.send(null); \u0026lt;/script\u0026gt; 이를 막기 위해 필요한 정보가 Origin이다. Origin은 브라우저가 스크립트를 통해 HTTP 요청을 시작할 때 해당 스크립트가 실행된 장소를 의미한다. 그리고 장소는 schema, hostname, port 정보를 합쳐 표현한다. (i.e., schema://hostname:port)\n예를 들어 http://www.example.com:8080/hello 에서 fetch로 http://www.naver.com 사이트를 읽어오면 Origin은 http://www.example.com:8080 가 되는 것이다. Host 혹은 Referer와 비슷하지만 Host는 schema를 포함하지 않고, Referer는 path까지 포함하는 정보이다.\nHow to work 브라우저가 스크립트를 통해 HTTP 요청을 시작할 때 schema, host, port 정보로 Origin을 만들고, 이 정보를 HTTP 요청마다 Origin 헤더로 추가한다. 서버는 요청을 처리한 뒤, 리스폰스 헤더에 해당 Origin이 리스폰스를 읽을 수 있는지 여부를 표시한다. 이후 브라우저에서 리스폰스에 표시가 없다면 스크립트에서 접근을 제한한다.\n크롬이나 사파리 같은 메이저 브라우저에서 다른 Origin의 웹 사이트를 요청하는 코드를 실행해보면 에러가 반환되는 것을 확인할 수 있다. 서버에서 명시적으로 특정 Origin을 허용하도록 설정해주지 않으면, 리소스에 대한 접근이 불가능한 것이다.\n1 2 3 4 5 \u0026gt;\u0026gt; var xhr = new XMLHttpRequest(); \u0026gt;\u0026gt; xhr.open(\u0026#39;GET\u0026#39;, \u0026#39;http://example.com\u0026#39;, true); \u0026gt;\u0026gt; xhr.send(null); // Access to XMLHttpRequest at \u0026#39;https://example.com/\u0026#39; from origin \u0026#39;https://stackoverflow.com\u0026#39; has been blocked by CORS policy: No \u0026#39;Access-Control-Allow-Origin\u0026#39; header is present on the requested resource. // GET https://example.com/ net::ERR_FAILED 200 JSONP Same-origin policy는 스크립트를 통해 생성된 HTTP 요청에만 적용되고, 다른 도메인의 이미지, CSS나 스크립트 파일을 로드하면서 발생하는 HTTP 요청은 해당되지 않는다. 이런 특성은 강제적인 Same-origin policy의 제한을 예외적으로 허용하고 싶을 때, (i.e., 서로 다른 서브 도메인 간 리소스 공유) 활용될 수 있고, 이를 JSONP (JSON with Padding)라고 부른다.\n현재의 CORS (Cross-Origin Resource Sharing)가 널리 사용되기 전인 2005년에 Bob Ippolito에 의해 고안된 방법으로, script의 src에 요청할 다른 도메인의 서버의 주소를 지정하고, 해당 서버에서는 JSON 형식의 리스폰스를 callback 함수의 인자로 호출하는 스크립트 소스 형태로 반환하는 것이다. (아래 코드 참고) 서로 다른 Origin 간 HTTP 요청이지만, 스크립트 로드를 통해 읽어온 데이터이므로 Same-origin policy에 위배되지 않고 Cross-Origin Resource Sharing이 가능하다.\n1 2 3 4 5 6 \u0026lt;script type=\u0026#34;application/javascript\u0026#34; src=\u0026#34;http://bank.com/myinfo?callback=checkAccount\u0026#34;\u0026gt; \u0026lt;/script\u0026gt; // Response of http://example.com/myinfo checkAccount({\u0026#34;name\u0026#34;: \u0026#34;Alice\u0026#34;, \u0026#34;id\u0026#34;: 1234}); Illusions Can\u0026rsquo;t we set the Origin header? 모질라 문서에 따르면 브라우저는 아래와 같은 요청에는 무조건 Origin 헤더를 추가한다. 그래서 Origin 헤더를 임의로 설정한 뒤 XMLHttpRequest를 실행해도 브라우저가 알아서 덮어씌우므로 변조할 수 없다.\ncross origin requests. same-origin requests except for GET or HEAD requests (i.e. they are added to same-origin POST, OPTIONS, PUT, PATCH, and DELETE requests). 📝 Note\nOrigin 헤더 말고 스크립트에서 덮어씌울 수 없는 헤더 목록은 Forbidden header name에서 확인할 수 있다.\nOrigin 헤더를 추가하는 정책은 rfc 문서의 \u0026ldquo;7.3 User Agent Requirements\u0026rdquo; 부분을 읽어보면 Same-origin policy를 위한 필수적인 요구 사항임을 알 수 있다.\nThe user agent MAY include an Origin header field in any HTTP request. The user agent MUST NOT include more than one Origin header field in any HTTP request. 물론 Burp Suite 같은 Web proxy를 통해 HTTP 요청을 intercept 한다면 Origin 헤더를 변조할 수 있다. 근데 이런 방식으로 HTTP 요청을 감청하여 Origin을 변경할 수 있는건 MITM이 가능하다는 전제이므로 고려하지 않는다. Same-origin policy는 악성 웹 사이트의 관리자가 스크립트 코드를 통해 다른 웹 사이트의 리소스를 읽을 수 없도록 막아준다. 애초에 MITM이 가능하다면 Origin을 변경하여 Same-origin policy가 우회되는 것은 신경쓰지 않아도 될 정도로 심각한 공격이 가능하다.\nCan same-origin policy prevent CSRF? Same-origin policy가 CSRF 공격까지 막을 수 있을까? 라는 질문에 꽤 많은 사람들이 막을 수 있다고 생각한다. 결론부터 말하면 절반 정도 맞는 말이다. Same-origin policy이 다른 Origin에 대한 HTTP 요청을 막아준다고 착각해서 악의적인 웹 사이트에서 정상적인 웹 사이트로 변조된 요청을 보내는 CSRF 공격을 막을 수 있다고 믿는다.\nSame-origin policy는 웹 페이지에서 스크립트를 통해 다른 웹 페이지의 컨텐츠를 읽을 때 Origin이 같은 경우만 허용하는 정책이다.\n해당 포스트의 첫 문단에서 설명한 대로 Same-origin policy는 HTTP 요청을 막는 게 아니라 요청 결과에 접근하지 못하도록 막는 것이다. 요청 자체를 막으려면 서버에서 Origin을 확인하고 요청을 거부하거나, 브라우저에서 실제 요청을 보내기 전에 서버에게 허용된 Origin이 맞는지 확인하는 과정이 필요하다.\nCSRF 공격을 막을 수 있다는 말이 절반정도 맞는 이유는 CSRF를 막기 위해 흔히 사용되는 CSRF token 같은 방어책이 Same-origin policy에 의존하기 때문이다. 서버에서 웹 페이지를 제공하기 전에 랜덤한 값(CSRK token)을 생성하여 유저의 세션에 저장하고, 웹 페이지에 존재하는 input form에 포함시킨 채로 제공한다. 그러면 요청이 전송될 때 토큰이 같이 전송되고 서버에서 세션에 저장된 토큰과 비교하여 위조된 요청인지 확인한다.\n만약 Same-origin policy가 보장되지 않는다면 공격자는 웹 페이지에 포함되어 있는 토큰 값을 읽을 수 있으니 CSRF 공격을 막을 수 없다.\nCan custom headers prevent CSRF? 세션 아이디를 Cookie가 아닌 Custom header를 통해 전달하도록 서버를 구성하면 일부 CSRF 공격을 막을 수 있다. 이 방법은 CSRF token 같이 웹 페이지나 세션 정보에 토큰을 저장하지 않는 장점이 있다.\nXMLHttpRequest.setRequestHeader 공식 문서를 참고하면 다른 도메인에 대한 HTTP 요청에 Custom header를 추가하면 Same-origin policy에 의해 요청이 중단된다고 나와있다.\nNote: For your custom fields, you may encounter a \u0026ldquo;not allowed by Access-Control-Allow-Headers in preflight response\u0026rdquo; exception when you send requests across domains. In this situation, you need to set up the Access-Control-Allow-Headers in your response header at server side.\n그래서 setRequestHeader(\u0026quot;x-custom-header\u0026quot;, 'abc')로 헤더를 추가하여 요청을 보내면 OPTIONS 메소드로 먼저 요청을 보내 허용된 Origin인지 확인하는 과정(pre-flight CORS check)이 추가된다. 하지만 XHR이나 AJAX를 사용하는 API 요청에만 적용할 수 있고, form 태그를 통한 요청에는 적용할 수 없다. 그리고 pre-flight CORS check를 위한 CORS 설정도 따로 관리해줘야 하므로 오히려 비용이 증가할 수 있다.\n물론 Same-origin policy에 의존하지 않는 방법도 있다. Cookie에 samesite 보안 옵션을 추가하면 다른 Origin에서 보낸 HTTP 요청에는 Cookie가 같이 포함되지 않아 CSRF를 막을 수 있고, CAPTCHA 같이 유저 인터랙션을 강제하는 방법으로 막을 수도 있다.\n","date":"2022-12-21T02:05:26+09:00","permalink":"https://truealarm.github.io/p/misunderstood-of-same-origin-policy/","title":"Misunderstood of same-origin policy"},{"content":"mutex(Mutual execlusion)은 다수의 프로세스나 스레드가 공유하는 자원을 안전하게 사용(concurrent control)할 수 있도록 해주는 기술이다. 상호 배제라는 직역의 의미대로 한 스레드가 이미 임계 영역에 진입했다면 다른 스레드가 임계 영역에 진입하지 못하도록 막아준다. mutex의 원리나 필요성을 제대로 이해하지 않고 멀티스레드 프로그래밍을 한다면, Race condition 같은 문제가 발생한다.\nRace condition 여러 스레드가 공유 데이터에 접근하는 임계 영역을 제한하지 않을 때 발생하는 Race condition 문제의 예시는 다음과 같다. 아래 그림처럼 i-1, i, i+1, i+2 노드가 연결된 싱글 리스트에서 i 노드를 삭제하려면, i-1 노드의 next 주소를 i+1 주소로 변경하는 코드를 통해 i 노드를 제거한다. 문제는 2개의 쓰레드가 각각 i 노드와 i+1 노드를 동시에 삭제를 시도하는 경우 의도와 달리 i+1 노드가 삭제되지 않는 결과가 나타난다. 이런 결과가 발생한 이유는 첫 번째 스레드가 노드를 완전히 삭제하기 전에, 두 번째 스레드도 삭제를 시도하였고, 스레드 간의 어떠한 협의나 규약 없이 임계 영역의 삭제 코드를 실행해서 그렇다.\nRace condition 문제가 무서운 이유는 잘못된 concurrent operation을 수행하는 코드로 인해 뜻밖의 코드에서 런타임 에러가 발생하거나, 오히려 런타임 에러 없이 정상적으로 종료돼 문제가 발생한 사실조차 알아차리기 힘들기 때문이다. 게다가 Race condition은 크리티컬한 취약점으로 귀결될 가능성이 높다. 보통 웹 백엔드 서버의 경우 쿠폰 중복 사용, 이중 출금 등 금전적인 손해를 유발하는 취약점이 있고, 네이티브한 프로그램에서는 경계 검사 우회, UAF와 같은 취약점으로 이어져 메모리 보호 기법을 우회하는데 이용될 수 있다.\n개인적으로 골치 아프다고 생각했던 이유는 그날의 운에 따라 Race condition이 발생할 수도 있고 안할 수도 있다는 특징 때문이다. Race condition은 2개 이상의 스레드가 동시에 임계 영역에 접근할 때 발생하는 문제여서, 운이 좋게 각각의 스레드가 임계 영역을 차례대로 실행한다면 아무런 문제가 발생하지 않는다. 스레드의 실행 순서와 선점(preemption)은 운영체제에서 스케쥴링하고, CPU 코어 수나 스레드 우선 순위, I/O 블록 여부에 따라 순서가 크게 달라지므로 그야말로 복불복이다. (물론 모든게 알고리즘에 의해 결정되므로 엄밀히 따지면 복불복은 아니지만, 애플리케이션 레벨에서는 제멋대로 실행되는 것처럼 보인다)\nRace condition을 악용하려는 공격자는 보통 단 시간내 최대한 많은 쓰레드가 임계 영역에 접근하도록 유도하여 고의적으로 문제를 유발한다. 이런 이유로 테스트 코드만으로는 Race condition을 발견하기 힘들고, 실제 서비스가 프로덕션으로 배포되고 사용자가 충분히 많아진 시점에서 발견된다.\nMutual Exclusion mutex의 공유 자원 관리는 총 4가지 상태로 나누어 진행할 수 있는데, 임계 영역으로 진입을 시도하는 Trying 상태, 임계 영역에 진입한 Critical 상태, 임계 영역의 실행이 끝나 다른 스레드에게 차례를 넘겨주는 Exit 단계, 마지막으로 임계 영역 이외의 공유 자원에 접근하지 않는 Remainder 상태가 있다. 노드를 삭제하는 코드 영역을 임계 영역으로 설정하고, 다음과 같은 과정을 통해 임계 영역에 하나의 스레드만 진입하게 할 수 있다.\n스레드가 노드를 삭제하는 코드(임계 영역)에 도달하면 Remainder 상태에서 Trying 상태로 전환. 임계 영역에 진입한 스레드가 없으면 Critical 상태로 전환. 있으면 대기. (모든 작업이 일련에, atomic하게 처리되어야 함) Critical 상태의 스레드가 노드를 완벽히 삭제한 후 Exit 상태로 전환하여, 다른 스레드가 임계 영역을 실행할 수 있도록 한다. 삭제를 끝낸 스레드는 Reminder 상태로 돌아가 임계 영역 이외의 코드를 실행. Deadlock Freedom mutex를 적용했을 때 보장되어야 하는 특성 중 임계 영역에서 스레드를 상호 배제시켜 주는 mutual exclusion 이외의 중요한 특성이 하나 더 있다. 모든 스레드가 Trying 상태에서 빠져 나가지 못하게 되어 임계 영역의 코드를 실행할 수 없는, 다시 말해 프로세스의 아무런 진전이 없는 교착 상태(Deadlock)가 발생하지 않도록 보장해야 한다. 한 스레드가 Trying 상태에서 무한히 기다리고 있다면, 어떤 스레드는 임계 영역에 이미 진입한 상태임을 항상 보장하는 특성이 Deadlock Freedom 이다.\n그렇다면 위와 같이 각각의 스레드가 2개의 mutex를 사용하는 경우를 생각해보자. 1,2번 스레드가 각각 1,2번 임계 영역에 진입한 후에 다른 임계 영역으로 진입을 시도한다면, 이미 서로 진입했던 임계 영역이라 무한 루프에 빠지게 된다. 위 상황처럼 임계 영역에 진입한 스레드가 무한 루프에 빠지거나, 모종의 이유로 Exit 상태로 전환되지 않아 모든 스레드가 영원히 대기하더라도 Deadlock Freedom은 만족하는 것이다. 1,2번 스레드 모두 아무런 진전이 없는 Deadlock 상태처럼 보이지만, 이미 Trying 상태를 벗어나 1,2번 임계 영역에 진입한 이후다. 따라서 무한 루프를 발생시키는 코드라 할 지라도 임계 영역의 코드를 실행하고 있으므로 진전이 있다고 말할 수 있다.\nLockout Freedom Deadlock Freedom을 만족하더라도 우선 순위가 높은 스레드가 임계 영역에 반복적으로 여러번 접근하면 해당 스레드만 계속 점유하는 현상이 발생할 수 있다. 우선 순위가 낮은 스레드는 계속 Trying 상태로 머무르는 기아 상태(Starvation)에 빠질 수 있는 것이다. Deadlock Freedom에서 확장되어 임계 영역에 진입하고자 하는 Trying 상태의 스레드가 유한한 시간 내에 임계 영역에 진입하여 기아 상태가 발생하지 않도록 보장하는 특성을 Lockout Freedom 이라고 부릅니다. Lockout Freedom은 mutex의 필수 특성은 아니다.\nHardware implemenation 하드웨어 기반으로 mutex를 구현하는 방법 중 가장 간단한 방법은 임계 영역에 진입하기 전에 interrupt를 비활성화해 cpu가 context swithch을 하지 못하게 만드는 방법이다. interrupt가 발생하지 않으면 스레드나 프로세스의 실행이 스케쥴링되지 않으므로, 임계 영역 실행 도중에 다른 스레드가 선점하지 못하게 막을 수 있지만 Uniprocesser에서만 가능하다. Multiprocessor는 각각의 cpu가 병렬적으로 실행되므로, interrupt가 비활성화되지 않은 다른 cpu가 임계 영역에 진입할 수 있다. 물론 모든 프로세서의 interrupt를 비활성화하면 되지만, 다른 프로세스의 interrupt 설정까지 변경하기 힘들고 성능이 매우 저하되므로 비싼 multiprocessor를 사놓고 할 짓은 아니다. 게다가 임계 영역에 머무르는 동안 interrupt를 비활성화하면 시간 정보(system clock)을 가져오지 못하거나, 임계 영역에서 다시 interrupt 설정을 복구하지 못하고 종료되면 전체 시스템의 장애로 이어지는 단점이 있다.\n1 2 3 4 5 function TestAndSet(boolean_ref lock) { boolean initial = lock; lock = true; return initial; } 이런 한계점을 극복하기 위해 공유 메모리와 read-modify-write 명령어를 통해 Busy-waiting 시스템을 구현한다. read-modify-write 명령어에 속하는 test-and-set 명령어는 위 코드와 같이 스레드가 공유하는 메모리에서 초기 lock 상태를 읽어온 뒤, lock 상태를 true로 설정하고 초기 lock 상태를 반환하는 기능을 수행한다. 당연히 하드웨어에서 이 모든 작업을 atomic하게 수행할 수 있는 단일 어셈블리를 지원해야 한다. 명령어의 반환 값이 false면 임계 영역에 진입하고, true면 다른 작업을 수행하거나 루프를 돌며 차례를 기다리는 방식으로 mutex를 구현할 수 있다. 이 과정을 코드로 표현하면 아래와 같다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 while true do: // state: Remainder ... do remainder stuff ... // state: Trying while TestAndSet(lock) = true { /* spin */ } // state: Critical ... do critical section stuff ... // state: Exiting reset(lock) 공유 메모리로 생성한 lock의 상태를 읽고, 변경하는 과정을 모두 atomic하게 수행하므로 임계 영역에 항상 하나의 스레드만 진입하는 것을 보장할 수 있다.\n📝 Note\n임계 영역에 진입하기 위해 루프를 돌며 차례를 기다리는 방식을 spinlock이라고 부른다. 다른 스레드로 context switch하고, 나중에 다시 context를 restore 하는 과정을 거치지 않고, 짧은 시간동안 차례를 기다려 오버헤드를 최소화한다.\n위 방식은 mutex의 기본 조건은 모두 만족하지만, lockout freedom은 만족하지 않는다. 그래서 만약 특정 스레드가 빠르게 lock을 set하고 reset하는 과정을 반복한다면, 다른 스레드는 임계 영역에 진입하지 못하게 되는 starvation이 발생하고, 이로 인해 몇몇 스레드의 성능이 비정상적으로 떨어질 수 있다.\n이를 해결하려면 스레드의 도착 순서를 기록하면 되고, atomic queue를 통해 1) Trying 시점에 스레드 id를 enquque, 2) queue의 head 값과 본인의 스레드 id가 일치할 때 임계 영역에 진입, 3) Exiting 시점에 dequeue하면 된다. atomic queue를 사용하는 이유는 enqueue, dequeue 할 때 race condition이 발생하지 않게 하기 위함이다. (atmoic queue는 mutex와 달리 lock에 의존적이지 않도록 compare-and-swap 명령어를 통해 Non-blocking 자료구조로 구현한다)\nSoftware implemenation test-and-set 명령어와 같이 하드웨어가 제공하는 atomic operation 없이 소프트웨어 구현으로만 mutex를 구현할 수 있는 여러 알고리즘이 존재한다. 알고리즘에 들어간 아이디어가 궁금하여 Dekker\u0026rsquo;s algorithm과 Lamport\u0026rsquo;s bakery algorithm을 살펴보았다. 다만, 소프트웨어 알고리즘은 cpu 최적화 기법 중 Out-of-order execution이 적용되면 의도한 순서대로 순차적으로 명령어가 실행되지 않기에 문제가 발생할 수 있지만, Memory ordering을 적용하여 해결할 수 있다.\nDekker\u0026rsquo;s algorithm Dekker\u0026rsquo;s algorithms은 2개의 프로세스가 임계 영역에 동시에 접근해도 상호 베타적으로 실행되도록 보장하는 최초의 mutual execlusion 알고리즘이다. 프로세스는 임계 영역에 들어가겠다는 의도를 표현할 플레그 값(will_enter)과, 임계 영역에 진입 가능한 프로세스를 나타나는 플레그 값(turn)을 공유하는게 특징이다. Dekker\u0026rsquo;s algorithms을 슈도 코드로 구현해가며, 어떤 아이디어가 적용됐는지 살펴보겠다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 /* Mutex version 1 ** global variables: P0_enter, P1_enter */ Process 0: /* State: Trying */ while P1_enter = true { /* spin */ } // [A] P0_enter ← true /* State: Critical */ ... do critical section stuff ... /* State: Exiting */ P0_enter ← false 위 코드는 첫 번째 프로세스(P0)가 사용하는 코드로, 임계 영역에 도달하면 P1_enter 값을 읽어 상대 프로세스가 임계 영역에 이미 진입했는지 확인한다. 만약 없다면 곧바로 임계 영역으로 진입하고 P0_enter을 true로 설정하여 임계 영역에 진입했음을 알린다. 임계 영역을 나가기 직전에 P0_enter 값을 다시 false로 설정하여 P1에게 차례를 내준다.\n하지만 [A] 지점에서 P0_enter 값을 true로 설정하는 코드가 실행되기 전에 context switch가 발생하여 P1이 선점한다면, 임계 영역에 2개의 프로세스 모두 진입하게 되는 race condition이 발생한다. 이를 막기 위해 P0_enter 의 설정 시점을 아래와 같이 변경한다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 /* Mutex version 2 ** global variables: P0_will_enter, P1_will_enter */ Process 0: /* State: Trying */ P0_will_enter ← true // [A] while P1_will_enter = true { /* spin */ } /* State: Critical */ ... do critical section stuff ... /* State: Exiting */ P0_will_enter ← false 이제는 P0 프로세스가 임계 영역에 진입할 것이라는 의도를 나타내는P0_will_enter 값에 true를 설정하고, P1_will_enter 값을 확인하여 P1 프로세스가 임계 영역에 진입했는지 확인한다. 덕분에 두 개의 프로세스가 동시에 임계 영역에 접근할 가능성은 없어졌지만, [A] 지점에서 context switch가 발생하면 P0_will_enter, P1_will_enter 모두 true가 될 수 있어 아무도 임계 영역에 진입하지 못하는 교착 상태가 발생한다. 이는 mutex의 기본 조건인 deadlock freedom에 위배되는 구현이다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /* Mutex version 3 ** global variables: P0_will_enter, P1_will_enter, priority */ Process 0: /* State: Trying */ P0_will_enter ← true while P1_will_enter = true { P0_will_enter ← false while priority != P0 { /* spin */ } P0_will_enter ← true } /* State: Critical */ ... do critical section stuff ... /* State: Exiting */ priority ← P1 P0_will_enter ← false deadlock 문제를 해결하기 위해 어떤 프로세스가 먼저 실행할 지 결정할 priority 값을 추가한다. 만약 P0_will_enter, P1_will_enter 모두 true가 되어 두 개의 프로세스가 모두 while 문으로 진입하였더라도, 본인의 순서가 아니면 will_enter 값을 false로 설정하고 차례를 기다린다. 따라서 하나의 프로세스는 while 문 밖으로 빠져나와 임계 영역을 진입하게 된다.\n여기까지 구현했다면 mutex로 사용하기 충분하지만, starvation으로부터 자유롭지 않으므로 공정성(fairness)을 높이기 위한 조치를 취할 수 있다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 /* Mutex version 4 ** global variables: P0_will_enter, P1_will_enter, priority */ Process 0: /* State: Trying */ P0_will_enter ← true while P1_will_enter = true { if priority != P0 { P0_will_enter ← false while priority != P0 { /* spin */ } P0_will_enter ← true } } /* State: Critical */ ... do critical section stuff ... /* State: Exiting */ priority ← P1 P0_will_enter ← false 첫 번째 while 문에서 priority 값을 비교해 본인의 순서인지 확인하고, 본인의 순서라도 deadlock에 빠지지 않기 위해 다른 프로세스가 will_enter를 false를 설정하는 것을 기다린다. 안쪽의 while 문은 본인의 순서가 아닌 상태에서 다른 프로세스가 임계 영역에서 빠져나가는 것을 기다리는 루프이다. 이렇게 현재 priority에 따라 목적에 맞는 spin을 선택하도록 하면 공정성을 좀 더 높일 수 있다. 위처럼 mutual exclusion, deadlock freedom, starvation freedom까지 고려한 알고리즘이 바로 Dekker\u0026rsquo;s algorithm 이다.\nLamport\u0026rsquo;s bakery algorithm Dekker\u0026rsquo;s algorithm은 2개의 프로세스가 임계 영역에 접근하는 경우만 고려하였기 때문에, 수십개 이상의 프로세스와 스레드가 동시에 실행되는 상황에서 적용하기 힘들다. 반면에 Lamport\u0026rsquo;s bakery algorithm은 2개 이상의 스레드가 동시에 실행되는 환경에서도, 완벽하게 임계 영역에 진입할 스레드를 결정하여 동시성 프로그래밍을 가능하게 한다.\nLamport\u0026rsquo;s bakery algorithm이 상호 배제를 위해 채택한 방식은 실생활의 번호표 대기 시스템과 비슷하다. 은행에서 동시간대 몰린 고객들을 관리할 때 입구에서 고객마다 번호표를 뽑도록 하고, 대기실 모니터에 현재 상담 중인 번호를 알려준다. 상담이 끝나 고객이 창구를 나가면, 현재 번호에 1을 더하고 대기하던 고객들은 모두 자신의 번호표에 적힌 번호를 통해 차례를 확인하여 일치하면 상담 창구로 들어간다. 여기서 고객을 하나의 스레드로 생각하고 알고리즘을 구현하면 된다.\n하지만 컴퓨터 세계에서 모든 스레드가 사이좋게 중복되지 않은 번호표를 뽑는 것을 기대할 수 없다. 만약 여러 스레드가 중복되지 않은 번호표를 뽑는게 가능하다면, Lamport\u0026rsquo;s bakery algorithm을 통해 해결하고자 하는 상호 배제 문제를 해결할 필요가 없다. 왜냐하면 여러 개의 스레드가 동시에 번호표를 발급받는 상황에서 atomic operation이나 mutex를 통해 동시성 프로그래밍을 하지 않으면, 같은 번호를 발급받게 되는 상황이 생길 수 있기 때문이다. 그래서 Lamport\u0026rsquo;s bakery algorithm은 프로세스가 같은 번호표를 뽑는 상황에 대비하여 스레드마다 갖는 고유한 아이디를 활용한다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 /* Mutex version 1 global variables: Number[1..NUM_THREADS] = {0}; */ lock(int i) { Number[i] = 1 + max(Number[1], ..., Number[NUM_THREADS]); // [A] for (int j = 1; j \u0026lt;= NUM_THREADS; j++) { // Wait until all threads with smaller numbers or with the same // number, but with higher priority, finish their work: while ((Number[j] != 0) \u0026amp;\u0026amp; ((Number[j], j) \u0026lt; (Number[i], i))) { /* spin */ } // [B] } } unlock(int i) { Number[i] = 0; } Thread(int i) { while (true) { lock(i); ... do critical section stuff ... unlock(i); // non-critical section... } } 위 코드가 지금까지 설명한 내용을 토대로 Lamport\u0026rsquo;s bakery algorithm를 구현한 코드이다. lock 함수는 스레드가 번호표를 뽑고 [A], 자신의 번호를 계속 확인하다 차례가 오면 [B], 임계 영역에 진입하는 함수이고, unlock 함수는 임계 영역에서 빠져나올 때 실행하는 함수이다.\n1 while ((Number[j] != 0) \u0026amp;\u0026amp; ((Number[j], j) \u0026lt; (Number[i], i))) { /* spin */ } lock 함수에서 두 번째 while 문을 통해 실행하는 위 코드가 어떤 스레드가 임계 영역에 들어갈 차례인지 결정하는 코드인 동시에 모두가 차례대로 임계 영역에 접근하기 위해 따르는 규칙이다. Number 배열은 모든 스레드가 공유하는 변수이며 스레드 아이디를 인덱스로 사용하여 스레드가 발급받은 번호를 저장한다. 전체 스레드 갯수만큼 반복문을 돌며, 다른 스레드의 번호가 내 번호보다 작은지 비교한다. 작다면 해당 스레드가 먼저 번호표를 뽑은 스레드이므로 spin을 돌며 기다린다. 번호표를 뽑은 스레드 중 가장 작은 번호의 스레드가 임계 영역을 실행하고 나가면서 unlock 함수를 호출하므로, 다음으로 작은 번호표를 뽑은 스레드가 spin에서 빠져나와 임계 영역으로 진입한다.\n처음에 설명한대로 서로 다른 스레드가 동시에 [A] 지점의 코드를 실행하면, 같은 번호를 갖는 경우가 생길 수 있어 번호가 같은 경우도 대비해야 한다. 그래서 Number 정보가 같은 경우, 스레드마다 고유한 아이디인 i, j를 비교하여 더 작은 아이디의 스레드가 임계 영역에 진입한다. 이제 더이상 고려해야 하는 문제가 없어보이지만, 해당 구현에는 큰 결함이 하나 존재한다.\n만약 어떤 스레드가 [A]에서 최대값을 Number[i]에 저장하기 직전에 context switching이 발생한다면, 다른 스레드가 [B]에서 Number 값을 제대로 비교할 때 이를 확인할 방법이 없다. (최대값을 계산하고 저장하는 코드는 atomic하게 실행되지 않으므로 이런 상황이 발생할 수 있다) 이게 문제가 될 수 있는 상황은 다음과 같다.\n1번 스레드가 Number[1]에 번호를 저장하기 직전에 2번 스레드가 선점한다면 1,2번 스레드는 같은 번호를 가지게 된다. 이후로 2번 스레드는 1번 스레드가 아직 Number[1]에 번호를 저장하지 않은 사실은 모른채, while문을 통해 모든 스레드의 번호를 확인하고 본인의 번호가 가장 작은걸 확인하고 임계 영역으로 진입한다. 이때 1번 스레드가 다시 실행되어 Number[1]에 번호를 저장하고 while문을 통해 모든 스레드의 번호를 확인하지만, 2번 스레드보다 본인의 아이디가 더 작은걸 확인하고 임계 영역에 진입한다. 결국 2개의 스레드가 모두 임계 영역에 들어가는 사태가 발생한다.\nLamport\u0026rsquo;s bakery algorithm에서는 이런 문제를 해결하려고 임계 영역에 진입하려는 스레드가 번호를 완전히 저장했는지 확인할 목적으로 Entering 변수를 추가하였다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 /* Mutex version 2 global variables: Entering[1..NUM_THREADS] = {false}; Number[1..NUM_THREADS] = {0}; */ lock(int i) { Entering[i] = true; Number[i] = 1 + max(Number[1], ..., Number[NUM_THREADS]); Entering[i] = false; for (int j = 1; j \u0026lt;= NUM_THREADS; j++) { // Wait until thread j receives its number: while (Entering[j]) { /* wait */ } // [C] // Wait until all threads with smaller numbers or with the same // number, but with higher priority, finish their work: while ((Number[j] != 0) \u0026amp;\u0026amp; ((Number[j], j) \u0026lt; (Number[i], i))) { /* spin */ } // [D] } } unlock(int i) { Number[i] = 0; } Thread(int i) { while (true) { lock(i); ... do critical section stuff ... unlock(i); // non-critical section... } } Number[i]를 저장하기 전에 Entering[i]에 true를, 저장이 완료되면 false를 설정하는 코드랑 Entering[j]가 false가 될 때까지 기다리는 [C] 코드가 추가됐다. [C]에 추가된 반복문이 Entering[j]가 false가 될 때까지 기다리므로, [D]에서 다른 스레드의 번호를 비교하는 시점에는 Number에 값을 저장하지 않은 스레드를 걱정하지 않아도 됩니다.\n이렇게 구현한 Lamport\u0026rsquo;s bakery algorithm은 Dekker\u0026rsquo;s algorithm과 마찬가지로 mutual exclusion, deadlock freedom, lockout freedom을 만족합니다. 게다가 모든 스레드는 먼저 온 순서대로 번호를 부여받고, 임계 영역에 진입하므로 높은 fairness를 갖는 알고리즘입니다.\nReferences https://en.wikipedia.org/wiki/Mutual_exclusion https://www.cs.yale.edu/homes/aspnes/pinewiki/MutualExclusion.html http://www.qnx.com/developers/docs/6.3.2/neutrino/prog/overview.html https://helix979.github.io/jkoo/post/os-scheduler/ https://lamport.azurewebsites.net/pubs/mutual2.pdf ","date":"2022-11-20T03:54:03+09:00","permalink":"https://truealarm.github.io/p/mutex-in-a-nutshell/","title":"Mutex in a nutshell"}]